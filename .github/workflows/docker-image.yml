name: Docker Image CI/CD

on:
  push:
    branches: [ "master", "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master", "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GIT_SHA: ${{ github.sha }}
  RUNNER_ID: ${{ github.run_number }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-{{ env.GIT_SHA}}-{{ env.RUNNER_ID }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image for testing
      run: docker build . --file Dockerfile --tag test-image

    - name: Test Docker image
      run: |
        # Start the container in background
        docker run -d --name test-container -p 3000:3000 test-image
        
        # Wait for the application to start
        sleep 10
        
        # Test if the application is responding (basic health check)
        curl -f http://localhost:3000 || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container
